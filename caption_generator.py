import os
import json
from typing import List, Dict
from PIL import Image
from transformers import BlipProcessor, BlipForConditionalGeneration
from openai import OpenAI
from dotenv import load_dotenv
from const import (
    PROMPT_FOLDER,
    STORY_PROMPT_FOLDER,
    OPENAI_API_KEY,
    CARTOON_INSTRUCTION_TEMPLATE,
    STORY_INSTRUCTION_TEMPLATE
)

# Initialize OpenAI client
client = OpenAI(api_key=OPENAI_API_KEY)

# Load BLIP captioning model
processor = BlipProcessor.from_pretrained("Salesforce/blip-image-captioning-base")
model = BlipForConditionalGeneration.from_pretrained("Salesforce/blip-image-captioning-base")

def generate_cartoon_prompt(image_path: str, model_name: str = "gpt-4") -> str:
    """
    Generate a cartoon-style illustration prompt from an image using BLIP and GPT.

    Args:
        image_path (str): Path to the input image.
        model_name (str): Name of the OpenAI model to use. Default is "gpt-4".

    Returns:
        str: A single-sentence cartoon-style prompt generated by GPT.
    """
    os.makedirs(PROMPT_FOLDER, exist_ok=True)

    img = Image.open(image_path).convert("RGB")
    inputs = processor(img, return_tensors="pt")
    output = model.generate(**inputs)
    caption = processor.decode(output[0], skip_special_tokens=True)

    user_prompt = CARTOON_INSTRUCTION_TEMPLATE.format(caption=caption)

    response = client.chat.completions.create(
        model=model_name,
        messages=[{"role": "user", "content": user_prompt}],
        temperature=0.6,
    )

    cartoon_prompt = response.choices[0].message.content.strip()

    image_name = os.path.splitext(os.path.basename(image_path))[0]
    prompt_path = os.path.join(PROMPT_FOLDER, f"{image_name}.txt")
    with open(prompt_path, "w") as f:
        f.write(cartoon_prompt)

    return cartoon_prompt

def generate_story_prompt(caption: str, model_name: str = "gpt-4") -> List[Dict[str, str]]:
    """
    Generate a 3-part animated story prompt based on a cartoon-style caption.

    Args:
        caption (str): Cartoon-style image description.
        model_name (str): OpenAI model to use for story generation. Default is "gpt-4".

    Returns:
        List[Dict[str, str]]: List of scene dictionaries with 'id' and 'prompt'.
    """
    os.makedirs(STORY_PROMPT_FOLDER, exist_ok=True)

    user_prompt = STORY_INSTRUCTION_TEMPLATE.format(caption=caption)

    response = client.chat.completions.create(
        model=model_name,
        messages=[{"role": "user", "content": user_prompt}],
        temperature=0.8,
    )

    raw_content = response.choices[0].message.content

    try:
        scene_list = json.loads(raw_content)
    except json.JSONDecodeError:
        return []

    for scene in scene_list:
        scene_path = os.path.join(STORY_PROMPT_FOLDER, f"{scene['id']}.txt")
        with open(scene_path, "w") as f:
            f.write(scene["prompt"])

    return scene_list
